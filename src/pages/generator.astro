---
import Layout from "../layouts/Layout.astro";
import { ui } from "../i18n/ui.js";

const locale = Astro.locals.lang as "en" | "fr" ?? "en";
---

<Layout title={ui[locale].generator.title}>
  <main class="min-h-screen p-6 flex flex-col gap-6 items-center bg-base-200">
     
    <div class="flex w-full max-w-5xl items-center justify-between">
      <h1 class="text-3xl font-bold text-primary">{ui[locale].generator.title}</h1>
      <a href="/" class="btn btn-secondary">← {ui[locale].nav.home}</a>
      <div class="breadcrumbs text-sm mb-2"> 
        <ul> 
          <li><a href="/" class="text-primary">{ui[locale].nav.home}</a></li> 
          <li class="text-secondary">{ui[locale].generator.title}</li>
        </ul> 
      </div>
    </div>

    <!-- Grid 2 colonnes -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 w-full max-w-5xl">
      <!-- 1. Prompt input -->
      <div class="card bg-base-100 shadow-xl p-4 flex flex-col gap-4">
        <textarea
          id="user-prompt"
          class="textarea textarea-bordered textarea-lg w-full"
          placeholder={ui[locale].generator.promptPlaceholder}
        ></textarea>
        <div class="flex gap-2">
          <button id="generate-button" class="btn btn-secondary">{ui[locale].generator.generateButton}</button>
          <button id="edit-button" class="btn btn-secondary">{ui[locale].generator.editButton}</button>
        </div>
        <div class="flex gap-2 mt-2">
          <input id="svg-name" type="text" placeholder="Nom du SVG" class="input input-bordered input-sm w-full" />
          <button id="save-svg" class="btn btn-accent">{ui[locale].generator.saveButton}</button>
          <a href="/gallery" class="btn btn-outline btn-info">{ui[locale].generator.viewSaved}</a>
        </div>
      </div>

      <!-- 2. Code généré -->
      <div class="card bg-base-100 shadow-xl p-4">
        <h2 class="font-semibold text-primary">{ui[locale].generator.code}</h2>
        <pre id="svg-output" class="whitespace-pre-wrap text-sm text-secondary"></pre>
      </div>
    </div>

    <!-- 3. Aperçu SVG -->
    <div class="card bg-base-100 shadow-xl p-4 w-full max-w-5xl">
      <h2 class="font-semibold text-primary">{ui[locale].generator.preview}</h2>
      <div id="svg-container" class="flex justify-center items-center min-h-[200px]"></div>
    </div>
  </main>
<script>
  //@ts-nocheck
    const user = JSON.parse(localStorage.getItem("user"));

    saveButton.addEventListener("click", async () => {
      const name = prompt("Enter a name for the SVG:");
      const svgOutput = document.getElementById("svg-output")?.textContent;
    console.log("Saving SVG: ", JSON.stringify(svgOutput));
    
    const params: Collection.Svg = {
        nom: name,
        code_svg: svgOutput || "<svg></svg>",
        chat_history: JSON.stringify(promptList),
        user: user.id
    };
    await saveSVG(params);
    });
    
  let promptList = []; // Historique des échanges

  // Appel API
  async function generateSVG(messages) {
    const res = await fetch('/api/generateSVG', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ messages }),
    });
    if (!res.ok) throw new Error("Erreur API SVG");
    const data = await res.json();
    return data.svg;
  }

// Fonction pour générer un nouveau SVG
async function handleSubmit() {
  const promptElement = document.getElementById("user-prompt");
  const generateButton = document.getElementById("generate-button");
  const editButton = document.getElementById("edit-button");
  const svgOutput = document.getElementById("svg-output");
  const svgContainer = document.getElementById("svg-container");

  const prompt = promptElement.value.trim();
  if (!prompt) return;

  // Ajouter le prompt à l'historique
  promptList.push({ role: "user", content: prompt });

  // Spinner
  svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
  generateButton.disabled = true;
  editButton.disabled = true;

  try {
    // Appel API
    const svgCode = await generateSVG(promptList);

    // Ajouter la réponse de l'IA à l'historique
    promptList.push({ role: "assistant", content: svgCode });

    // Affichage
    svgOutput.textContent = svgCode;
    svgContainer.innerHTML = svgCode;

    promptElement.value = "";
  } catch (err) {
    console.error("Erreur génération SVG:", err);
    svgContainer.textContent = "Erreur lors de la génération du SVG.";
  } finally {
    generateButton.disabled = false;
    editButton.disabled = false;
  }
}

// Fonction pour éditer le SVG existant
async function handleEdit() {
  const promptElement = document.getElementById("user-prompt");
  const generateButton = document.getElementById("generate-button");
  const editButton = document.getElementById("edit-button");
  const svgOutput = document.getElementById("svg-output");
  const svgContainer = document.getElementById("svg-container");

  const prompt = promptElement.value.trim();
  if (!prompt) return;

  // Ajouter le prompt utilisateur à l'historique
  promptList.push({ role: "user", content: prompt });

  // Spinner
  svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
  generateButton.disabled = true;
  editButton.disabled = true;

  try {
    // Appel API avec l'historique
    const svgCode = await generateSVG(promptList);

    // Ajouter la réponse de l'IA à l'historique
    promptList.push({ role: "assistant", content: svgCode });

    // Mettre à jour l'affichage
    svgOutput.textContent = svgCode;
    svgContainer.innerHTML = svgCode;

    // Reset du champ prompt
    promptElement.value = "";

    // DEBUG : vérifier l'historique envoyé
    console.log("Historique des prompts :", promptList);
  } catch (err) {
    console.error("Erreur édition SVG:", err);
    svgContainer.textContent = "Erreur lors de l'édition du SVG.";
  } finally {
    generateButton.disabled = false;
    editButton.disabled = false;
  }
}


  // Sauvegarde du SVG
  async function saveSVG(params) {
    const res = await fetch("/api/saveSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(params),
    });
    return await res.json();
  }

  // Gestionnaires d'événements
  document.getElementById("generate-button")?.addEventListener("click", handleSubmit);
  document.getElementById("edit-button")?.addEventListener("click", handleEdit);
  document.getElementById("save-svg")?.addEventListener("click", async () => {
    const name = document.getElementById("svg-name").value.trim();
    const code = document.getElementById("svg-output").textContent;

    if (!name || !code) {
      alert("Veuillez générer un SVG et donner un nom.");
      return;
    }

    const params = {
      name: name,
      code: code,
      chat_history: JSON.stringify(promptList),
    };

    const result = await saveSVG(params);
    if (result.success) {
      alert("SVG sauvegardé avec succès !");
      document.getElementById("svg-name").value = "";
    } else {
      alert("Erreur lors de la sauvegarde : " + result.error);
    }
  });
</script>
</Layout>
