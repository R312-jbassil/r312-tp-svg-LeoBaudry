---
import Layout from "../layouts/Layout.astro";
import { ui } from "../i18n/ui.js";

const locale = Astro.locals.lang as "en" | "fr" ?? "en";
const user = Astro.locals.user;
---

<Layout title={ui[locale].generator.title} user={user} lang={locale}>
  <main class="min-h-screen p-6 flex flex-col gap-6 items-center bg-base-200">
     
    <div class="flex w-full max-w-5xl items-center justify-between">
      <h1 class="text-3xl font-bold text-primary">{ui[locale].generator.title}</h1>
      <a href="/" class="btn btn-secondary">← {ui[locale].nav.home}</a>
      <div class="breadcrumbs text-sm mb-2"> 
        <ul> 
          <li><a href="/" class="text-primary">{ui[locale].nav.home}</a></li> 
          <li class="text-secondary">{ui[locale].generator.title}</li>
        </ul> 
      </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 w-full max-w-5xl">
      <div class="card bg-base-100 shadow-xl p-4 flex flex-col gap-4">
        <textarea
          id="user-prompt"
          class="textarea textarea-bordered textarea-lg w-full"
          placeholder={ui[locale].generator.promptPlaceholder}
        ></textarea>
        <div class="flex gap-2">
          <button id="generate-button" class="btn btn-secondary">{ui[locale].generator.generateButton}</button>
          <button id="edit-button" class="btn btn-secondary">{ui[locale].generator.editButton}</button>
        </div>
        <div class="flex gap-2 mt-2">
          <input id="svg-name" type="text" placeholder="Nom du SVG" class="input input-bordered input-sm w-full" />
          <button id="save-svg" class="btn btn-accent">{ui[locale].generator.saveButton}</button>
          <a href="/gallery" class="btn btn-outline btn-info">{ui[locale].generator.viewSaved}</a>
        </div>
        <!-- Boutons de téléchargement -->
        <div class="flex gap-2 mt-2">
          <button id="download-svg" class="btn btn-secondary gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
            </svg>
            Télécharger SVG
          </button>
          <button id="download-png" class="btn btn-outline btn-primary gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            Télécharger PNG
          </button>
        </div>
      </div>

      <div class="card bg-base-100 shadow-xl p-4">
        <h2 class="font-semibold text-primary">{ui[locale].generator.code}</h2>
        <pre id="svg-output" class="whitespace-pre-wrap text-sm text-secondary"></pre>
      </div>
    </div>

    <div class="card bg-base-100 shadow-xl p-4 w-full max-w-5xl">
      <h2 class="font-semibold text-primary">{ui[locale].generator.preview}</h2>
      <div id="svg-container" class="flex justify-center items-center min-h-[200px]"></div>
    </div>
  </main>

<script>
  //@ts-nocheck
  const user = JSON.parse(localStorage.getItem("user"));
  let promptList = [];

  // Fonction pour télécharger le SVG
  function downloadSVG() {
    const svgCode = document.getElementById("svg-output")?.textContent;
    if (!svgCode || svgCode.trim() === "") {
      alert("Aucun SVG à télécharger. Veuillez d'abord générer un SVG.");
      return;
    }

    const svgName = document.getElementById("svg-name")?.value.trim() || "generated";
    const blob = new Blob([svgCode], { type: "image/svg+xml" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `${svgName}.svg`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }

  // Fonction pour télécharger en PNG
  function downloadPNG() {
    const svgElement = document.querySelector("#svg-container svg");
    if (!svgElement) {
      alert("Aucun SVG à télécharger. Veuillez d'abord générer un SVG.");
      return;
    }

    const svgName = document.getElementById("svg-name")?.value.trim() || "generated";
    const svgData = new XMLSerializer().serializeToString(svgElement);
    const canvas = document.createElement("canvas");
    const ctx = canvas.getContext("2d");
    const img = new Image();

    const svgBlob = new Blob([svgData], { type: "image/svg+xml;charset=utf-8" });
    const url = URL.createObjectURL(svgBlob);

    img.onload = () => {
      canvas.width = img.width || 500;
      canvas.height = img.height || 500;
      ctx.fillStyle = "white";
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.drawImage(img, 0, 0);
      URL.revokeObjectURL(url);

      canvas.toBlob((blob) => {
        const pngUrl = URL.createObjectURL(blob);
        const link = document.createElement("a");
        link.href = pngUrl;
        link.download = `${svgName}.png`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(pngUrl);
      });
    };

    img.src = url;
  }

  // Event listeners pour les boutons de téléchargement
  document.getElementById("download-svg")?.addEventListener("click", downloadSVG);
  document.getElementById("download-png")?.addEventListener("click", downloadPNG);

  // Appel API
  async function generateSVG(messages) {
    const res = await fetch('/api/generateSVG', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ messages }),
    });
    if (!res.ok) throw new Error("Erreur API SVG");
    const data = await res.json();
    return data.svg;
  }

  async function handleSubmit() {
    const promptElement = document.getElementById("user-prompt");
    const generateButton = document.getElementById("generate-button");
    const editButton = document.getElementById("edit-button");
    const svgOutput = document.getElementById("svg-output");
    const svgContainer = document.getElementById("svg-container");

    const prompt = promptElement.value.trim();
    if (!prompt) return;

    promptList.push({ role: "user", content: prompt });

    svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;
    editButton.disabled = true;

    try {
      const svgCode = await generateSVG(promptList);
      promptList.push({ role: "assistant", content: svgCode });

      svgOutput.textContent = svgCode;
      svgContainer.innerHTML = svgCode;

      promptElement.value = "";
    } catch (err) {
      console.error("Erreur génération SVG:", err);
      svgContainer.textContent = "Erreur lors de la génération du SVG.";
    } finally {
      generateButton.disabled = false;
      editButton.disabled = false;
    }
  }

  async function handleEdit() {
    const promptElement = document.getElementById("user-prompt");
    const generateButton = document.getElementById("generate-button");
    const editButton = document.getElementById("edit-button");
    const svgOutput = document.getElementById("svg-output");
    const svgContainer = document.getElementById("svg-container");

    const prompt = promptElement.value.trim();
    if (!prompt) return;

    promptList.push({ role: "user", content: prompt });

    svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;
    editButton.disabled = true;

    try {
      const svgCode = await generateSVG(promptList);
      promptList.push({ role: "assistant", content: svgCode });

      svgOutput.textContent = svgCode;
      svgContainer.innerHTML = svgCode;

      promptElement.value = "";

      console.log("Historique des prompts :", promptList);
    } catch (err) {
      console.error("Erreur édition SVG:", err);
      svgContainer.textContent = "Erreur lors de l'édition du SVG.";
    } finally {
      generateButton.disabled = false;
      editButton.disabled = false;
    }
  }

  async function saveSVG(params) {
    const res = await fetch("/api/saveSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(params),
    });
    return await res.json();
  }

  document.getElementById("generate-button")?.addEventListener("click", handleSubmit);
  document.getElementById("edit-button")?.addEventListener("click", handleEdit);
  document.getElementById("save-svg")?.addEventListener("click", async () => {
    const name = document.getElementById("svg-name").value.trim();
    const code = document.getElementById("svg-output").textContent;

    if (!name || !code) {
      alert("Veuillez générer un SVG et donner un nom.");
      return;
    }

    const params = {
      name: name,
      code: code,
      chat_history: JSON.stringify(promptList),
    };

    const result = await saveSVG(params);
    if (result.success) {
      alert("SVG sauvegardé avec succès !");
      document.getElementById("svg-name").value = "";
    } else {
      alert("Erreur lors de la sauvegarde : " + result.error);
    }
  });
</script>
</Layout>