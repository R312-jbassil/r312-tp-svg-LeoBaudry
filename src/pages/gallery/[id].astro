---
// gallery/[id].astro
import Layout from "../../layouts/Layout.astro";
import pb from "../../utils/pb";
import { Collections, type SvgRecord } from "../../utils/pocketbase-typegen";

const id = Astro.params.id;
if (!id) {
  throw new Error("ID parameter is required");
}
const svg: SvgRecord = await pb.collection(Collections.Svg).getOne(id);
const user = Astro.locals.user;

// Convertir le chat_history JSON string en tableau JS
const chatHistory: { role: string; content: string }[] = JSON.parse(svg.chat_history || "[]");
---
<Layout title={`Édition SVG - ${svg.name}`}>
  <main class="min-h-screen p-6 flex flex-col gap-6 items-center bg-base-200">

    <div class="flex w-full max-w-5xl items-center justify-between">
      <h1 class="text-3xl font-bold text-primary">Édition : {svg.name}</h1>
      <a href="/gallery" class="btn btn-secondary">← Retour à la galerie</a>
    </div>

    <!-- Aperçu SVG -->
    <div id="svg-preview" class="card bg-base-100 shadow-xl p-4 w-full max-w-5xl flex justify-center items-center min-h-[300px]">
      <div set:html={svg.code}></div>
    </div>

    <!-- Historique chat -->
    <div id="chat-history" class="flex flex-col gap-4 w-full max-w-5xl mb-4 overflow-y-auto flex-grow max-h-[400px]">
      {chatHistory.length > 0 ? (
        chatHistory.map(msg => (
          <div class={`chat ${msg.role === 'user' ? 'chat-start' : 'chat-end'}`}>
            <div class={`chat-bubble ${msg.role === 'user' ? 'bg-primary text-black' : 'bg-secondary text-white'}`}>
              <pre>{msg.content}</pre>
            </div>
            <div class="chat-footer opacity-60 text-xs mt-1">{msg.role}</div>
          </div>
        ))
      ) : (
        <span class="text-error">Aucun historique de chat.</span>
      )}
    </div>

    <!-- Formulaire de prompt -->
    <form id="input-prompt-form" class="flex items-center gap-2 w-full max-w-5xl bg-base-300 p-4" autocomplete="off">
      <input type="hidden" name="history" value={JSON.stringify(chatHistory)} />
      <input type="hidden" name="id" value={svg.id} />
      <input id="prompt-input" name="editPrompt" type="text" class="input flex-grow" placeholder="Entrez un prompt pour éditer le SVG..." />
      <button class="btn btn-primary text-black" type="submit">Envoyer</button>
    </form>

  </main>

<script>
  //@ts-nocheck
  const form = document.getElementById('input-prompt-form');
  const svgPreview = document.getElementById('svg-preview');
  const chatHistoryDiv = document.getElementById('chat-history');

  // Fonction pour générer un SVG via l'API
  async function generateSVG(messages) {
    const res = await fetch('/api/generateSVG', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ messages }),
    });
    if (!res.ok) throw new Error("Erreur API SVG");
    const data = await res.json();
    return data.svg;
  }

  // Fonction pour mettre à jour le SVG dans PocketBase
  async function updateSVG(updatedData) {
    const res = await fetch("/api/updateSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(updatedData),
    });
    return res.json();
  }

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    const promptText = formData.get('editPrompt').trim();
    if (!promptText) return;

    // Récupération de l'historique et ajout du nouveau prompt
    let history = JSON.parse(form.querySelector('input[name="history"]').value);
    const userPrompt = { role: 'user', content: promptText };
    history.push(userPrompt);

    // Mise à jour du champ hidden
    form.querySelector('input[name="history"]').value = JSON.stringify(history);

    // Ajouter prompt à l'affichage
    chatHistoryDiv.innerHTML += `
      <div class="chat chat-start">
        <div class="chat-bubble bg-primary text-black"><pre>${promptText}</pre></div>
        <div class="chat-footer opacity-60 text-xs mt-1">user</div>
      </div>
    `;

    // Scroll automatique
    chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;

    // Spinner
    svgPreview.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;

    // Appel API pour générer le SVG
    let aiResponse = await generateSVG(history);
    history.push({ role: 'assistant', content: aiResponse });

    // Extraction SVG
    const svgMatch = aiResponse.match(/<svg[\s\S]*?<\/svg>/i);
    aiResponse = svgMatch ? svgMatch[0] : "";

    // Mise à jour de l'affichage
    svgPreview.innerHTML = aiResponse;
    chatHistoryDiv.innerHTML += `
      <div class="chat chat-end">
        <div class="chat-bubble bg-secondary text-white"><pre>${aiResponse}</pre></div>
        <div class="chat-footer opacity-60 text-xs mt-1">assistant</div>
      </div>
    `;
    chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;

    // Update dans PocketBase
    const response = await updateSVG({
      id: formData.get("id"),
      code: aiResponse,
      chat_history: JSON.stringify(history),
    });
    if (response.success) {
      console.log("SVG mis à jour !");
    } else {
      alert("Erreur mise à jour SVG : " + response.error);
    }

    form.reset();
  });
</script>
